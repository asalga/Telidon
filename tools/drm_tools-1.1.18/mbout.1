.TH "mbout" "1" "1.0.0 OCT 23 2006" "drm_tools" "User Commands"

.SH NAME

mbout \- reassemble a binary data stream has has been buffered through multiple files

.SH SYNOPSIS

.BI mbout " [options...]"

.SH DESCRIPTION

.B mbout
stands for Multiple Buffer OUTput.  With the matching program
.B mbin
it provides
a way to buffer large amounts of data to disk files which are then reassembled
and written to the final target.  In particular it is designed to buffer
binary information destined for a streaming tape drive which must first
be transmitted slowly over a network.  Rather than writing the incoming
data slowly to a tape drive, which results in stalling and increased drive
wear, the data is first written into a buffer file.  When that first buffer
file is full
.B mbin
writes a lock file and a notification to the output.
.B mbin
then proceeds to
write more input into the next buffer file.  Simultaneously 
.B mbout
will read the notification and copy the buffered data at full speed to the
tape drive.  When done copying data from a buffer file
.B mbout
will clear the associated lock file.  

.B mbin
writes the following information to its output, each on a separate line:
the block size (an integer),
the number of buffer files (an integer),
the name of the first buffer file,
the name of the second buffer file,
etc.,
the name of the first lock file,
the name of the second lock file,
and so forth.  This describes the buffers for the downstream
program
.B mbout.
Then 
.B mbin
writes a series of lines each of which contain this
information:  blocks_in_buffer buffer_file_number (two integers).  This tells
.B mbout
that a block of data is ready to be copied. When 
.B mbin
is done processing it writes either
.B DONE message
or
.B ABORT message
depending upon whether it completed processing normally or not.  In response
to either of those signals
.B mbout
will clean up by deleting all buffer and lock files. It will also close its
output file and exit.

.B mbout
may be obtained as part of the 
.B drm_tools
package from:
.B http://sourceforge.net/projects/drmtools/

On many operating systems
.B mbout
must be compiled with large file support if it is to read or write files above a
few gigabytes in size.  If compiled with the
.B gcc
compiler add the command line switches
.B -D_LARGE_FILE_SOURCE -D_FILE_OFFSET_BITS=64 
to include large file support.  The
.B -i
option will show whether or not large files are supported.

.SH OPTIONS

.TP
.BI  -in " <input_file>"
Read status messages from the specified file.  (Default or - read from stdin.)

.TP
.BI  -out " <out_file>"
Write the binary data stream to the specified file.  (Default or - write to stdout.)

.TP
.BI  -log " <log_file>"
Write error messages to the specified file.  (Default or - write to stderr.)

.TP
.B -ve
Echo every command to stderr or the log file.  This may be useful for debugging.

.TP
.BI -vr " <N>"
Write a status message every N blocks.

.TP
.B -vt
Write a final status message when processing completes, even if there has been no error.  This message
says how many blocks of a given blocksize were written to the output.

.TP
.B -h -help --help -? --??
Print the help message. (Default - do not print help message.)

.TP
.B -i
Emit version, copyright, license and contact information.( Default - do not emit information.)


.SH EXAMPLES


.TP
.B % mbout -h
List the the command line options.

.TP
.B % (ssh remotemachine 'dump -f - filesystem') | mbin | mbout > /dev/tapedrive
Buffer the binary input from the remote machine through two 15Gb local
files.

.TP
.B % (ssh remotemachine 'dump -f - filesystem') | mbin  | mbout -vr 1000 -vt > /dev/tapedrive
As above but emit a status message every 1000 blocks and when processing completes.

.SH SEE ALSO

.B mbin(1), buffer(1), mbuffer(1)

.SH LICENSE

GNU General Public License 2

.SH COPYRIGHT

Copyright (C) 2006 David Mathog and Caltech.

.SH AUTHORS

David Mathog, Biology Division, Caltech <mathog@caltech.edu>



